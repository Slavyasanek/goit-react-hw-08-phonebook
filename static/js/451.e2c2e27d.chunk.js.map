{"version":3,"file":"static/js/451.e2c2e27d.chunk.js","mappings":"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","sources":["components/StyledInput/StyledInput.jsx","pages/Registration.jsx"],"sourcesContent":["import { Input } from \"@chakra-ui/react\"\n\nexport const StyledInput = ({ type, placeholder, name, value, onChange, pattern, minLength, id }) => {\n    return (<>\n        <Input type={type} required\n            colorScheme=\"teal\"\n            variant={'outline'}\n            placeholder={placeholder}\n            focusBorderColor=\"teal.500\"\n            maxW={{ base: '350px', md: '400px', xl: '550px' }}\n            fontSize={'20px'}\n            p={'15px 20px'}\n            h={'60px'}\n            border={'2px'}\n            borderColor={'teal.200'}\n            outline={'none'}\n            _hover={{\n                borderColor: 'teal.300'\n            }} \n            name={name}\n            value={value}\n            onChange={onChange}\n            pattern={pattern}\n            minLength={minLength}\n            id={id}/>\n    </>)\n}","import { Flex, Center, FormControl, InputRightElement, Button, Heading, FormLabel, InputGroup} from \"@chakra-ui/react\";\nimport { StyledInput } from \"components/StyledInput/StyledInput\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport { UserSignUp } from \"redux/auth/operations\";\nimport { selectIsLoggedIn } from \"redux/auth/selectors\";\nimport { nanoid } from \"nanoid\";\n\nconst Registration = () => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [show, setShow] = useState(false);\n\n    const handleClick = () => setShow(!show);\n    const dispatch = useDispatch();\n\n    const isLoggedIn = useSelector(selectIsLoggedIn);\n    if (isLoggedIn) {\n        return <Navigate to={'/contacts'} />\n    }\n\n    const handleChange = ({ target }) => {\n        if (target.name === 'name') {\n            setName(target.value);\n        } else if (target.name === 'email') {\n            setEmail(target.value);\n        } else if (target.name === 'password') {\n            setPassword(target.value)\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        const user = {name, email, password};\n        console.log(user);\n        dispatch(UserSignUp(user));\n        reset();\n    }\n\n    const reset = () => {\n        setEmail('');\n        setPassword('');\n        setName('');\n    }\n\n    const nameId = nanoid();\n    const emailId = nanoid();\n    const passwdId = nanoid();\n\n    return (<Center w={'100%'} h={'100%'} pt={'100px'} pb={'70px'}>\n        <FormControl as='form' w={'inherit'} autoComplete=\"on\" onSubmit={handleSubmit}>\n            <Flex\n                direction={'column'}\n                gap={'10px'}\n                justifyContent={'center'}\n                align={'center'}\n                m={0}>\n\n                <Heading as={'h1'}>Sign up</Heading>\n\n                <FormLabel\n                    m={0} htmlFor={nameId}>Name</FormLabel>\n                <StyledInput type={\"text\"} \n                placeholder={\"Enter your name\"} \n                name=\"name\" onChange={handleChange} \n                value={name}\n                pattern={\"^[A-Za-z\\u0080-\\uFFFF ']+$\"}\n                id={nameId}/>\n\n                <FormLabel htmlFor={emailId} m={0}>Email</FormLabel>\n                <StyledInput id={emailId} type={\"email\"} placeholder={\"Enter your email\"} name={\"email\"} value={email} onChange={handleChange}/>\n\n                <FormLabel htmlFor={passwdId} m={0}>Password</FormLabel>\n                <InputGroup maxW={{ base: '350px', md: '400px', xl: '550px' }}>\n                <StyledInput \n                type={show ? 'text' : 'password'} \n                placeholder={\"Generate your unique password\"} \n                name={'password'} value={password} \n                onChange={handleChange}\n                minLength={7}\n                id={passwdId}/>\n\n                {password !== '' && <InputRightElement width='4.5rem' top={'50%'} transform={'translateY(-50%)'}>\n                    <Button h='1.75rem' size='sm' onClick={handleClick} colorScheme=\"teal\" variant={'outline'}>\n                        {show ? 'Hide' : 'Show'}\n                    </Button>\n                </InputRightElement>}\n                </InputGroup>\n                <Button \n                size={'lg'} \n                colorScheme=\"teal\" \n                variant={\"solid\"}\n                mt={'20px'}\n                w={'180px'}\n                type=\"submit\">Sign Up</Button>\n            </Flex>\n        </FormControl>\n    </Center>)\n};\n\nexport default Registration;\n"],"names":["StyledInput","type","placeholder","name","value","onChange","pattern","minLength","id","I","required","colorScheme","variant","focusBorderColor","maxW","base","md","xl","fontSize","p","h","border","borderColor","outline","_hover","useState","setName","email","setEmail","password","setPassword","show","setShow","dispatch","useDispatch","useSelector","selectIsLoggedIn","to","handleChange","target","reset","nameId","nanoid","emailId","passwdId","w","pt","pb","as","autoComplete","onSubmit","e","preventDefault","user","console","log","UserSignUp","direction","gap","justifyContent","align","m","htmlFor","width","top","transform","size","onClick","mt"],"sourceRoot":""}