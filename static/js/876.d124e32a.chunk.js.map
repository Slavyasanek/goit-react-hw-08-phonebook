{"version":3,"file":"static/js/876.d124e32a.chunk.js","mappings":"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","sources":["components/StyledInput/StyledInput.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { Input } from \"@chakra-ui/react\"\n\nexport const StyledInput = ({ type, placeholder, name, value, onChange, pattern, minLength, id }) => {\n    return (<>\n        <Input type={type} required\n            colorScheme=\"teal\"\n            variant={'outline'}\n            placeholder={placeholder}\n            focusBorderColor=\"teal.500\"\n            maxW={{ base: '350px', md: '400px', xl: '550px' }}\n            fontSize={'20px'}\n            p={'15px 20px'}\n            h={'60px'}\n            border={'2px'}\n            borderColor={'teal.200'}\n            outline={'none'}\n            _hover={{\n                borderColor: 'teal.300'\n            }} \n            name={name}\n            value={value}\n            onChange={onChange}\n            pattern={pattern}\n            minLength={minLength}\n            id={id}/>\n    </>)\n}","import { Button, FormControl, FormLabel, Flex, Box, Heading } from \"@chakra-ui/react\";\nimport { StyledInput } from \"components/StyledInput/StyledInput\";\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/contacts/operations\";\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { BsFillTelephonePlusFill } from 'react-icons/bs'\nimport {PiMagicWandLight} from 'react-icons/pi'\n\nexport const ContactForm = () => {\n    const [name, setName] = useState('');\n    const [phone, setPhone] = useState('');\n\n    const nameId = nanoid();\n    const phoneId = nanoid();\n\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const handleChange = ({ target }) => {\n        if (target.name === 'name') {\n            setName(target.value);\n        } else if (target.name === 'phone') {\n            setPhone(target.value);\n        }\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase() || contact.number === phone)) {\n            alert(`${name} is already in contacts`);\n            reset();\n            return;\n        }\n        const number = phone;\n        dispatch(addContact({ name, number }));\n        reset();\n    }\n\n    const reset = () => {\n        setName('');\n        setPhone('');\n    }\n\n    return (\n        <FormControl as={'form'} onSubmit={handleSubmit}>\n            <Flex\n                direction={'column'}\n                justifyContent={'center'}\n                align={'center'}\n                gap={2}\n                m={0}>\n                <Heading as=\"h3\"\n                    color={'teal.700'}\n                    textAlign={\"center\"}\n                    fontSize={{\n                        base: '16px',\n                        md: '20px'\n                    }}\n                    maxW={{\n                        base: '300px',\n                        md: '400px'\n                    }}\n                    display={\"flex\"} flexDirection={'row'}><Box as={PiMagicWandLight} size={'24px'} flexShrink={0}/>Creating your own phonebook is simplier than you can imagine</Heading>\n                <FormLabel htmlFor={nameId} m={0}>Name</FormLabel>\n                <StyledInput id={nameId}\n                    value={name}\n                    onChange={handleChange}\n                    type={\"text\"}\n                    placeholder={\"Enter name\"}\n                    name={\"name\"}\n                    pattern={\"^[A-Za-z\\u0080-\\uFFFF ']+$\"} />\n                <FormLabel htmlFor={phoneId} m={0}>Phone Number</FormLabel>\n                <StyledInput id={phoneId}\n                    value={phone}\n                    onChange={handleChange}\n                    type={\"tel\"}\n                    pattern={\"^(+?[0-9.]*)$\"}\n                    placeholder={\"Write phone number\"}\n                    name={\"phone\"} />\n                <Button\n                    colorScheme=\"teal\"\n                    variant={'outline'}\n                    mt={'5px'}\n                    w={'200px'}\n                    _hover={{\n                        bgColor: 'teal.100'\n                    }}\n                    gap={'10px'}\n                    type=\"submit\" ><Box as={BsFillTelephonePlusFill} \n                    size={'24px'} /> Add Contact</Button>\n            </Flex>\n        </FormControl>)\n};\n","import { Button, Tag, WrapItem, Box } from \"@chakra-ui/react\";\nimport {RiDeleteBin5Line} from 'react-icons/ri'\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\n\nexport const ContactItem = ({name, number, id}) => {\n    const dispatch = useDispatch();\n    const handleDelete = () => dispatch(deleteContact(id));\n    \n    return (<WrapItem w={{base: '100%', xl: 'calc((100% - 2 * 18px) / 2)'}} position={'relative'}>\n        <Tag \n            variant={'subtle'} \n            colorScheme=\"teal\" \n            color={'gray.500'}\n            mr={'8px'}\n            size={{base: 'sm', md: 'md', xl: 'lg'}}>\n                {name}</Tag>\n        <Tag \n            variant={'outline'} \n            colorScheme=\"teal\"\n            size={{base: 'sm', md: 'md', xl: 'lg'}}>{number}</Tag>\n        <Button onClick={handleDelete}\n                colorScheme=\"teal\"\n                borderRadius={'50%'}\n                w={{base: '30px', md: '35px'}}\n                h={{base: '30px', md: '35px'}}\n                minW={'30px'}\n                p={0}\n                position={'absolute'}\n                right={0}\n                top={'50%'}\n                transform={'translateY(-50%)'}><Box as={RiDeleteBin5Line} size={'20px'}/></Button>\n    </WrapItem>)\n};\n","import { Alert, Wrap } from \"@chakra-ui/react\";\nimport { ContactItem } from \"components/ContactItem/ContactItem\";\nimport { useSelector } from \"react-redux\";\nimport { selectFilteredContacts } from \"redux/contacts/selectors\"\n\nexport const ContactList = () => {\n    const contacts = useSelector(selectFilteredContacts);\n\n    return (<Wrap\n        minW={'100%'}\n        spacing={{\n            base: '14px',\n            md: '18px'\n        }}>\n        {contacts.length > 0 ? (contacts.map(contact =>\n            <ContactItem\n                key={contact.id}\n                name={contact.name}\n                number={contact.number}\n                id={contact.id} />))\n            : <Alert\n                as={'li'}\n                status=\"info\"\n                colorScheme=\"teal\"\n                variant={'left-accent'}>No matches found</Alert>}\n    </Wrap>)\n}","import { FormLabel, Input, InputGroup, InputRightElement, Box } from \"@chakra-ui/react\";\nimport { nanoid } from \"nanoid\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilter } from \"redux/contacts/selectors\";\nimport { setFilter } from \"redux/contacts/slice\";\nimport { FaSearch } from 'react-icons/fa';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filterId = nanoid()\n    const handleChange = (e) => {\n        dispatch(setFilter(e.target.value))\n    }\n\n    return (\n        <>\n            <FormLabel htmlFor={filterId}\n                fontSize={{ base: '20px', xl: '22px' }}>You can also find contacts by name</FormLabel>\n            <InputGroup>\n                <Input type=\"text\"\n                    name=\"filter\"\n                    id={filterId}\n                    placeholder=\"Searching by name...\"\n                    onChange={handleChange}\n                    variant={'outline'}\n                    focusBorderColor=\"teal.500\"\n                    bgColor={'whiteAlpha.700'}\n                    color={'teal.500'}\n                    fontWeight={600}\n                    _placeholder={{ color: 'teal.900', fontWeight: 600 }}\n                    value={useSelector(selectFilter)}\n                    maxW={'400px'}\n                    role=\"group\"\n                />\n                <InputRightElement w={'20px'} right={'10px'} _groupFocusWithin={{color: 'teal.500'}}>\n                    <Box as={FaSearch} size={'24px'} />\n                </InputRightElement>\n            </InputGroup>\n        </>\n    )\n};\n","import { Center, Box, Alert, AlertIcon, Flex } from \"@chakra-ui/react\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport { selectIsLoggedIn, selectIsRefreshing } from \"redux/auth/selectors\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectContacts } from \"redux/contacts/selectors\";\n\nconst Contacts = () => {\n    const isLoggedIn = useSelector(selectIsLoggedIn);\n    const isRefreshing = useSelector(selectIsRefreshing);\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch])\n\n    if (!isLoggedIn && !isRefreshing) {\n        return <Navigate to='/login' />\n    }\n    return (<Center\n        pt={{ base: '30px', md: '40px', xl: '70px' }}\n        pb={'100px'}\n        flexDirection={{ base: 'column', xl: 'row' }}\n        gap={{ xl: '20px' }}\n        alignItems={{ base: 'center', xl: 'start'}}>\n        <Box\n            bg={'white'}\n            flexShrink={0} \n            p={'20px'}\n            borderRadius={\"8px\"}\n            border={\"2px\"}\n            borderColor={'teal.300'}\n            w={{ base: '344px', md: '444px' }}>\n            <ContactForm />\n        </Box>\n        <Flex direction={'column'} flexGrow={1} w={'100%'}>\n            <Box mb={'20px'} mt={{ base: '20px', xl: 0}} alignSelf={{ base: 'center', xl: 'start'}}>\n                <Filter />\n            </Box>\n            <Box bg={'white'} minW={'100%'} p={'20px'} borderRadius={\"8px\"} border={\"2px\"} borderColor={'teal.300'}>\n                {contacts.length > 0 ?\n                    <ContactList />\n                    : <Alert\n                        status=\"info\"\n                        colorScheme=\"teal\"\n                        variant={'left-accent'}>\n                        <AlertIcon /> Add contacts to proceed</Alert>}\n            </Box>\n        </Flex>\n    </Center>)\n}\n\nexport default Contacts;"],"names":["StyledInput","type","placeholder","name","value","onChange","pattern","minLength","id","I","required","colorScheme","variant","focusBorderColor","maxW","base","md","xl","fontSize","p","h","border","borderColor","outline","_hover","ContactForm","useState","setName","phone","setPhone","nameId","nanoid","phoneId","dispatch","useDispatch","contacts","useSelector","selectContacts","handleChange","target","reset","as","onSubmit","e","preventDefault","find","contact","toLowerCase","number","alert","addContact","direction","justifyContent","align","gap","m","color","textAlign","display","flexDirection","PiMagicWandLight","size","flexShrink","htmlFor","mt","w","bgColor","BsFillTelephonePlusFill","ContactItem","position","mr","onClick","deleteContact","borderRadius","minW","right","top","transform","RiDeleteBin5Line","ContactList","selectFilteredContacts","spacing","length","map","status","Filter","filterId","setFilter","fontWeight","_placeholder","selectFilter","role","_groupFocusWithin","FaSearch","isLoggedIn","selectIsLoggedIn","isRefreshing","selectIsRefreshing","useEffect","fetchContacts","pt","pb","alignItems","bg","flexGrow","mb","alignSelf","to"],"sourceRoot":""}